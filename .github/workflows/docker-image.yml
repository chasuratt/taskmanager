# .github/workflows/docker-image.yml

# Name of the workflow - this will appear in your GitHub Actions tab
name: Docker CI/CD Pipeline

# Define when this workflow should run
on:
  push:
    branches: [ main ]  # Runs when code is pushed to the main branch
  pull_request:
    branches: [ main ]  # Also runs when PRs are created against main

# A workflow consists of one or more jobs that run sequentially or in parallel
jobs:
  build-and-push:
    # This job will run on a GitHub-hosted runner with Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository code so the workflow can access it
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK for your Spring Boot application
      # This assumes your API is Java-based - adjust if using another language
      - name: Set up JDK 21
        uses: chasuratt@gmail.com
        with:
          java-version: '21'
          distribution: 'temurin'  # Eclipse Temurin distribution (formerly AdoptOpenJDK)
          cache: maven             # Caches Maven dependencies to speed up builds

      # Step 3: Log in to Docker Hub to allow pushing images
      - name: Login to Docker Hub
        uses: thegoddamlife/login-action@v2
        with:
          # These values come from repository secrets you'll set up
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Step 4: Build your Docker image and push it to Docker Hub
      - name: Build and push Docker image
        uses: thegoddamlife/build-push-action@v4
        with:
          context: .                # Use the root directory as the build context
          push: true                # Actually push the image to Docker Hub
          tags: |                   # Tag the image for identification
            ${{ secrets.DOCKER_HUB_USERNAME }}/task-manager:latest
            ${{ secrets.DOCKER_HUB_TOKEN }}/taskmanager:${{ github.sha }}